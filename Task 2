#include <iostream>
#include <vector>
#include <string>

class Database {
private:
    std::vector<std::vector<std::string>> data;
    std::vector<std::string> headers;

public:
    // Constructor to initialize the database
    Database(std::vector<std::string> cols) {
        headers = cols;
        data.push_back(cols); // Add headers as the first row
    }

    // CREATE operation
    // Algorithm: Append a new row to the data
    void create(std::vector<std::string> row) {
        if (row.size() == headers.size()) {
            data.push_back(row);
        } else {
            std::cout << "Row size does not match headers size." << std::endl;
        }
    }

    // SELECT operation
    // Algorithm: Select rows based on a single condition
    void select(int columnIndex, const std::string& value) {
        for (const auto& row : data) {
            if (row[columnIndex] == value) {
                for (const auto& item : row) {
                    std::cout << item << " ";
                }
                std::cout << std::endl;
            }
        }
    }

    // DELETE operation
    // Algorithm: Remove rows that match a condition
    void deleteRow(int columnIndex, const std::string& value) {
        for (auto it = data.begin() + 1; it != data.end(); ) {
            if ((*it)[columnIndex] == value) {
                it = data.erase(it);
            } else {
                ++it;
            }
        }
    }

    // MAX operation
    // Algorithm: Find the maximum value in a specified column
    std::string max(int columnIndex) {
        std::string maxValue = data[1][columnIndex];
        for (size_t i = 2; i < data.size(); ++i) {
            if (data[i][columnIndex] > maxValue) {
                maxValue = data[i][columnIndex];
            }
        }
        return maxValue;
    }

    // Display the database
    void display() {
        for (const auto& row : data) {
            for (const auto& item : row) {
                std::cout << item << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    Database db({"ID", "Name", "Age"});

    db.create({"123", "Manoj", "49"});
    db.create({"124", "Rishi", "17"});
    db.create({"125", "Ananya", "15"});

    std::cout << "Database contents:" << std::endl;
    db.display();

    std::cout << "Select where Name = 'Ananya':" << std::endl;
    db.select(1, "Ananya");

    std::cout << "Max Age: " << db.max(2) << std::endl;

    db.deleteRow(1, "Rishi");
    std::cout << "Database after deleting Rishi:" << std::endl;
    db.display();

    return 0;
}
