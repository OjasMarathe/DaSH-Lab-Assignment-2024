#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>
#include <chrono>
#include <nlohmann/json.hpp>  // Include nlohmann/json.hpp for JSON handling

using namespace std;
using json = nlohmann::json;

// Simulated API Response Function
string simulateAPIResponse(const string& prompt) {
    return "This is a simulated response for: " + prompt;
}

int main() {
    ifstream inputFile("input.txt");
    ofstream outputFile("output.json");

    if (!inputFile.is_open()) {
        cerr << "Error: Could not open input.txt" << endl;
        return 1;
    }

    vector<json> outputData;
    string line;

    while (getline(inputFile, line)) {
        if (line.empty()) continue;

        // Capture the current time for TimeSent
        auto timeSent = chrono::system_clock::now();
        time_t timeSentEpoch = chrono::system_clock::to_time_t(timeSent);

        // Simulate API response
        string response = simulateAPIResponse(line);

        // Capture the current time for TimeRecvd
        auto timeRecvd = chrono::system_clock::now();
        time_t timeRecvdEpoch = chrono::system_clock::to_time_t(timeRecvd);

        // Create JSON object for this prompt
        json promptData = {
            {"Prompt", line},
            {"Message", response},
            {"TimeSent", timeSentEpoch},
            {"TimeRecvd", timeRecvdEpoch},
            {"Source", "SimulatedAPI"}
        };

        outputData.push_back(promptData);
    }

    // Write the JSON array to output.json
    outputFile << outputData.dump(4);  // Pretty print with 4-space indentation

    inputFile.close();
    outputFile.close();

    cout << "Output written to output.json" << endl;

    return 0;
}
